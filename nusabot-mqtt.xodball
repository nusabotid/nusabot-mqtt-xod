{
  "description": "MQTT client to publish/subscribe messaging.",
  "license": "GPL",
  "version": "1.0.1",
  "patches": {
    "@/example": {
      "description": "This example uses ESP8266. You can use development boards such as NodeMCU or Wemos.",
      "links": {
        "Sy9uo-o3O": {
          "id": "Sy9uo-o3O",
          "output": {
            "nodeId": "rJVdiZj2d",
            "pinKey": "HJU8CE2lW"
          },
          "input": {
            "nodeId": "S1vfYWs3O",
            "pinKey": "ByQ4aXnyE"
          }
        },
        "SywciZshd": {
          "id": "SywciZshd",
          "output": {
            "nodeId": "S1vfYWs3O",
            "pinKey": "SkhpDZs2_"
          },
          "input": {
            "nodeId": "HJU5j-sh_",
            "pinKey": "HJigO-in_"
          }
        },
        "BJKhs-i2O": {
          "id": "BJKhs-i2O",
          "output": {
            "nodeId": "HJU5j-sh_",
            "pinKey": "Bk7yK-BeE"
          },
          "input": {
            "nodeId": "S1Vhobjnu",
            "pinKey": "HkXK-dGob"
          }
        },
        "rJozlGs3d": {
          "id": "rJozlGs3d",
          "output": {
            "nodeId": "HJ-fgzo2d",
            "pinKey": "H1sM2A12-"
          },
          "input": {
            "nodeId": "S1vfYWs3O",
            "pinKey": "BJSrpWTyE"
          }
        },
        "S1QpZWjiK": {
          "id": "S1QpZWjiK",
          "output": {
            "nodeId": "r1m_OZj2u",
            "pinKey": "H1Gd15UFQ"
          },
          "input": {
            "nodeId": "rkf6bbsiF",
            "pinKey": "r1MCaWi3_"
          }
        },
        "HySTbbooF": {
          "id": "HySTbbooF",
          "output": {
            "nodeId": "rkf6bbsiF",
            "pinKey": "SJefRbonu"
          },
          "input": {
            "nodeId": "S1vfYWs3O",
            "pinKey": "rkQTwbs2_"
          }
        }
      },
      "nodes": {
        "r1m_OZj2u": {
          "boundLiterals": {
            "H1z0HpF8Km": "\"Pass WiFi\"",
            "HJZCrpKLYX": "\"SSID WiFi\""
          },
          "id": "r1m_OZj2u",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "type": "xod-dev/esp8266-mcu/connect"
        },
        "S1vfYWs3O": {
          "boundLiterals": {
            "SyWgnXnJ4": "\"nusabot/pot\"",
            "BJSrpWTyE": "\"connected\"",
            "ByQ4aXnyE": "Continuously"
          },
          "id": "S1vfYWs3O",
          "type": "nusabotid/nusabot-mqtt-broker/publish",
          "position": {
            "x": 0,
            "y": 2,
            "units": "slots"
          }
        },
        "rJVdiZj2d": {
          "boundLiterals": {
            "B13SCNhl-": "3"
          },
          "id": "rJVdiZj2d",
          "position": {
            "x": 5,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "HJU5j-sh_": {
          "boundLiterals": {
            "r1GhRamnJ4": "\"nusabot/subscribe\""
          },
          "id": "HJU5j-sh_",
          "type": "nusabotid/nusabot-mqtt-broker/subscribe",
          "position": {
            "x": 0,
            "y": 3,
            "units": "slots"
          }
        },
        "S1Vhobjnu": {
          "id": "S1Vhobjnu",
          "type": "xod/debug/watch",
          "position": {
            "x": 1,
            "y": 4,
            "units": "slots"
          }
        },
        "HJ-fgzo2d": {
          "id": "HJ-fgzo2d",
          "type": "xod/common-hardware/pot",
          "position": {
            "x": 3,
            "y": 1,
            "units": "slots"
          }
        },
        "rkf6bbsiF": {
          "id": "rkf6bbsiF",
          "type": "@/nusabot-iot",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          }
        }
      },
      "comments": {
        "B13YJzsh_": {
          "id": "B13YJzsh_",
          "position": {
            "x": 8,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "width": 10,
            "height": 2,
            "units": "slots"
          },
          "content": "This example uses ESP8266. You can use development boards such as NodeMCU or Wemos.\n\n1. Set SSID, Password and broker.\n2. Attach the potentiometer to pin A0 and upload the program.\n3. Use the MQTT Client (eg MQTT Explorer) to view the potentiometer value for the selected topic.\n4. Send the payload via MQTT Client to the subscribed topic and see the changes on the watch node."
        },
        "SkD2JGoh_": {
          "id": "SkD2JGoh_",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "width": 10,
            "height": 2,
            "units": "slots"
          },
          "content": "Example ini menggunakan ESP8266. Kamu bisa menggunakan development board seperti NodeMCU ataupun Wemos.\n\n1. Atur SSID, Password dan Broker.\n2. Pasang potensiometer pada pin A0 dan upload program.\n3. Gunakan MQTT Client (misalnya MQTT Explorer) untuk melihat nilai potensiometer pada topic yang telah diatur.\n4. Kirim payload melalui MQTT Client ke topic yang sudah disubscribe dan lihat perubahannya pada node watch."
        }
      },
      "path": "@/example"
    },
    "@/nusabot-connect": {
      "attachments": [
        {
          "content": "\n// clang-format off\n{{#global}}\n#include <ESP8266WiFi.h>\nchar* topicG;\nchar* payloadG;\nunsigned int lengthG = 0;\n{{/global}}\n// clang-format on\n\nstruct State {\n};\n\n// clang-format off\n{{ GENERATED_CODE }}\n// clang-format on\n\nvoid evaluate(Context ctx) {\n    auto MQTT = getValue<input_MQTT>(ctx);\n    auto state = getState(ctx);\n\n    if (isInputDirty<input_CONN>(ctx)) {\n\n            emitValue<output_DONE>(ctx, true);\n            emitValue<output_OUT>(ctx, MQTT);\n\n    }\n\n\n}\n",
          "encoding": "utf-8",
          "filename": "patch.cpp"
        }
      ],
      "nodes": {
        "B1Gew23i14": {
          "description": "Pulses if the connection failed\n",
          "label": "ERR",
          "id": "B1Gew23i14",
          "position": {
            "x": 2,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-pulse"
        },
        "H18evn2oJV": {
          "boundLiterals": {
            "__out__": "On Boot"
          },
          "description": "Establish the connection",
          "label": "CONN",
          "id": "H18evn2oJV",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-pulse"
        },
        "HyExD33s1V": {
          "description": "Pulses on a successful connection\n",
          "label": "DONE",
          "id": "HyExD33s1V",
          "position": {
            "x": 1,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-pulse"
        },
        "rJyGcx3yV": {
          "boundLiterals": {
            "__out__": "1883"
          },
          "label": "Port",
          "id": "rJyGcx3yV",
          "position": {
            "x": 3,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "ryev2niy4": {
          "id": "ryev2niy4",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "HJ_cP-o3u": {
          "label": "MQTT",
          "id": "HJ_cP-o3u",
          "type": "nusabotid/nusabot-mqtt-broker/input-nusabot-device",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          }
        },
        "S1_ivWond": {
          "id": "S1_ivWond",
          "type": "nusabotid/nusabot-mqtt-broker/output-nusabot-device",
          "position": {
            "x": 0,
            "y": 2,
            "units": "slots"
          }
        }
      },
      "path": "@/nusabot-connect"
    },
    "@/subscribe": {
      "attachments": [
        {
          "filename": "patch.cpp",
          "encoding": "utf-8",
          "content": "struct State {\n    String Ctopic;\n    char str[16];\n    CStringView view;\n    State() : view(str) { }\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(Context ctx) {\n    if (!isInputDirty<input_Update>(ctx)){\n    emitValue<output_OUT>(ctx, getValue<input_MQTT>(ctx));\n        return;}\n\n\n\n    if (isSettingUp()){\n    auto MQTT = getValue<input_MQTT>(ctx);\n    auto state = getState(ctx);\n    auto topic = getValue<input_Topic>(ctx);\n    auto topicLength = length(topic);\n    char _topic[topicLength + 1];\n    dump(topic, _topic);\n    _topic[topicLength] = '\\0';\n    state->Ctopic = String(_topic);\n    MQTT->subscribe(_topic);\n    return;\n    }\n\n    auto MQTT = getValue<input_MQTT>(ctx);\n    auto state = getState(ctx);\n    MQTT->loop();\n\n    for(int i=0; i<10; i++) //cycle thrue the buffer\n    {\n    if(state->Ctopic == Buff [i][0]){     //topics (global from callback) against Ctopic (Current Topic)\n        //Serial.println(\"incoming: \" + Gtopic + \" - \" + Gpayload);\n        Buff [i][1].toCharArray(state->str, 16);  //Check messages in buffer that matter to this node\n        Buff [i][0] = \"\";\n        Buff [i][1] = \"\";\n        emitValue<output_Message>(ctx, XString(&state->view));\n        emitValue<output_OK>(ctx, 1);\n          }\n    }\n\n    emitValue<output_OUT>(ctx, MQTT);\n}\n"
        }
      ],
      "description": "Subscribe to a MQTT Topic. (Subscribe ke Topic MQTT)",
      "nodes": {
        "Bk7yK-BeE": {
          "description": "Incomming message.",
          "label": "Message",
          "id": "Bk7yK-BeE",
          "position": {
            "x": 2,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-string"
        },
        "By6-JMT14": {
          "description": "Subscribed OK",
          "label": "OK",
          "id": "By6-JMT14",
          "position": {
            "x": 5,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-pulse"
        },
        "S19DoKNe4": {
          "boundLiterals": {
            "__out__": "Continuously"
          },
          "description": "Update incomming messages. (Needs to be quick/Continuous)",
          "label": "Update",
          "id": "S19DoKNe4",
          "position": {
            "x": 6,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-pulse"
        },
        "r1GhRamnJ4": {
          "boundLiterals": {
            "__out__": "\"/Arduino\""
          },
          "description": "The topic to publish to",
          "label": "Topic",
          "id": "r1GhRamnJ4",
          "position": {
            "x": 2,
            "y": -0.05,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "rkb2RaX31V": {
          "id": "rkb2RaX31V",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "BJFyOWo3u": {
          "label": "OUT",
          "id": "BJFyOWo3u",
          "type": "nusabotid/nusabot-mqtt-broker/output-nusabot-device",
          "position": {
            "x": 0,
            "y": 2,
            "units": "slots"
          }
        },
        "HJigO-in_": {
          "label": "MQTT",
          "id": "HJigO-in_",
          "type": "nusabotid/nusabot-mqtt-broker/input-nusabot-device",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          }
        }
      },
      "path": "@/subscribe"
    },
    "@/publish": {
      "attachments": [
        {
          "content": "\nstruct State {\n};\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(Context ctx) {\n    if (!isInputDirty<input_INIT>(ctx)){\n    emitValue<output_OUT>(ctx, getValue<input_MQTT>(ctx));\n        return;}\n\n    auto MQTT = getValue<input_MQTT>(ctx);\n\n    auto payload = getValue<input_Payload>(ctx);\n    auto payloadLength = length(payload);\n    char _payload[payloadLength + 1];\n    dump(payload, _payload);\n    _payload[payloadLength] = '\\0';\n\n    auto topic = getValue<input_Topic>(ctx);\n    auto topicLength = length(topic);\n    char _topic[topicLength + 1];\n    dump(topic, _topic);\n    _topic[topicLength] = '\\0';\n\n    MQTT->publish(_topic, _payload, getValue<input_Retaine>(ctx), getValue<input_QOS>(ctx));\n    emitValue<output_OUT>(ctx, MQTT);\n}\n",
          "encoding": "utf-8",
          "filename": "patch.cpp"
        }
      ],
      "description": "Publish a message to a Topic. (Publish sebuah pesan ke Topic yang sudah ditentukan)",
      "nodes": {
        "BJSrpWTyE": {
          "description": "The message to publish",
          "label": "Payload",
          "id": "BJSrpWTyE",
          "position": {
            "x": 4,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "ByQ4aXnyE": {
          "description": "SEND",
          "label": "INIT",
          "id": "ByQ4aXnyE",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-pulse"
        },
        "Hy2KFQh1N": {
          "id": "Hy2KFQh1N",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "S17WFtG4N": {
          "label": "QOS",
          "id": "S17WFtG4N",
          "position": {
            "x": 8,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "SJMeKYf44": {
          "label": "Retaine",
          "id": "SJMeKYf44",
          "position": {
            "x": 6,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-boolean"
        },
        "SyWgnXnJ4": {
          "description": "The topic to publish to",
          "label": "Topic",
          "id": "SyWgnXnJ4",
          "position": {
            "x": 2,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "rkQTwbs2_": {
          "label": "MQTT",
          "id": "rkQTwbs2_",
          "type": "nusabotid/nusabot-mqtt-broker/input-nusabot-device",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          }
        },
        "SkhpDZs2_": {
          "label": "OUT",
          "id": "SkhpDZs2_",
          "type": "nusabotid/nusabot-mqtt-broker/output-nusabot-device",
          "position": {
            "x": 0,
            "y": 2,
            "units": "slots"
          }
        }
      },
      "path": "@/publish"
    },
    "@/nusabot-iot": {
      "description": "Device setup and use Nusabot MQTT Broker automatically.\n(Pengaturan perangkat dan penggunaan Nusabot MQTT Broker secara otomatis).",
      "links": {
        "HyZ03Tbj2d": {
          "id": "HyZ03Tbj2d",
          "output": {
            "nodeId": "B1A2Tbjnd",
            "pinKey": "rJg_d3hoy4"
          },
          "input": {
            "nodeId": "H1gC3aboh_",
            "pinKey": "HJ_cP-o3u"
          }
        },
        "ByHRTZsh_": {
          "id": "ByHRTZsh_",
          "output": {
            "nodeId": "r1MCaWi3_",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "B1A2Tbjnd",
            "pinKey": "Bygji-oQN"
          }
        },
        "BJByA-j2_": {
          "id": "BJByA-j2_",
          "output": {
            "nodeId": "ryMJ0bi2u",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "B1A2Tbjnd",
            "pinKey": "ByxHBa4oXE"
          }
        },
        "BJ-GRZi2u": {
          "id": "BJ-GRZi2u",
          "output": {
            "nodeId": "H1gC3aboh_",
            "pinKey": "S1_ivWond"
          },
          "input": {
            "nodeId": "SJefRbonu",
            "pinKey": "__in__"
          }
        },
        "SyGQCZinO": {
          "id": "SyGQCZinO",
          "output": {
            "nodeId": "H1gC3aboh_",
            "pinKey": "HyExD33s1V"
          },
          "input": {
            "nodeId": "rJ0z0-oh_",
            "pinKey": "__in__"
          }
        },
        "B1I40Zi2u": {
          "id": "B1I40Zi2u",
          "output": {
            "nodeId": "H1gC3aboh_",
            "pinKey": "B1Gew23i14"
          },
          "input": {
            "nodeId": "rJVEAZsh_",
            "pinKey": "__in__"
          }
        },
        "ByHwglsjY": {
          "id": "ByHwglsjY",
          "output": {
            "nodeId": "HyyPeeoiF",
            "pinKey": "__out__"
          },
          "input": {
            "nodeId": "B1A2Tbjnd",
            "pinKey": "r1rBTEoQN"
          }
        }
      },
      "nodes": {
        "B1A2Tbjnd": {
          "boundLiterals": {
            "r1rBTEoQN": "\"103.56.206.108\"",
            "BkZBBaEsQN": "\"\"",
            "HyMrBpViQN": "\"\""
          },
          "id": "B1A2Tbjnd",
          "type": "nusabotid/nusabot-mqtt-broker/nusabot-device",
          "position": {
            "x": 2,
            "y": 1,
            "units": "slots"
          }
        },
        "H1gC3aboh_": {
          "id": "H1gC3aboh_",
          "type": "nusabotid/nusabot-mqtt-broker/nusabot-connect",
          "position": {
            "x": 2,
            "y": 2,
            "units": "slots"
          }
        },
        "r1MCaWi3_": {
          "label": "INET",
          "id": "r1MCaWi3_",
          "position": {
            "x": 2,
            "y": 0,
            "units": "slots"
          },
          "type": "xod-dev/esp8266-mcu/input-esp8266-mcu-inet"
        },
        "ryMJ0bi2u": {
          "boundLiterals": {
            "__out__": "\"device-nusabot\""
          },
          "label": "ID",
          "id": "ryMJ0bi2u",
          "type": "xod/patch-nodes/input-string",
          "position": {
            "x": 4,
            "y": 0,
            "units": "slots"
          }
        },
        "SJefRbonu": {
          "id": "SJefRbonu",
          "type": "nusabotid/nusabot-mqtt-broker/output-nusabot-device",
          "position": {
            "x": 2,
            "y": 3,
            "units": "slots"
          }
        },
        "rJ0z0-oh_": {
          "label": "DONE",
          "id": "rJ0z0-oh_",
          "type": "xod/patch-nodes/output-pulse",
          "position": {
            "x": 3,
            "y": 3,
            "units": "slots"
          }
        },
        "rJVEAZsh_": {
          "label": "ERR",
          "id": "rJVEAZsh_",
          "type": "xod/patch-nodes/output-pulse",
          "position": {
            "x": 4,
            "y": 3,
            "units": "slots"
          }
        },
        "HyyPeeoiF": {
          "id": "HyyPeeoiF",
          "type": "xod/patch-nodes/input-string",
          "position": {
            "x": 3,
            "y": 0,
            "units": "slots"
          },
          "label": "Broker",
          "boundLiterals": {
            "__out__": "\"\""
          }
        }
      },
      "path": "@/nusabot-iot"
    },
    "@/nusabot-device": {
      "attachments": [
        {
          "filename": "patch.cpp",
          "encoding": "utf-8",
          "content": "#pragma XOD require \"https://github.com/256dpi/arduino-mqtt\"\n\n// Include C++ library:\n{{#global}}\n#include <MQTT.h>\nString Buff [10][2]; //Setup buffer\nint Buffloc = 0; //current buffer location\n\nvoid messageReceived(String &topic, String &payload) {\n    if(Buffloc > 10){Buffloc = 0;}\n    Buff[Buffloc][0] = topic; //Populate buffer\n    Buff[Buffloc][1] = payload;\n    Buffloc = Buffloc +1;\n}\n{{/global}}\n\n\nstruct State {\n    uint8_t mem[sizeof(MQTTClient)];\n    WiFiClient client;\n};\n\n// Define our custom type as a pointer on the class instance.\nusing Type = MQTTClient*;\n\n{{ GENERATED_CODE }}\n\nvoid evaluate(Context ctx) {\n    // It should be evaluated only once on the first (setup) transaction\n    if (isSettingUp()){\n\n    auto state = getState(ctx);\n\n    // Create a new object in the memory area reserved previously.\n    Type MQTT = new (state->mem) MQTTClient();\n\n        auto server = getValue<input_Server>(ctx);\n        auto serverLength = length(server);\n        char _server[serverLength + 1];\n        dump(server, _server);\n        _server[serverLength] = '\\0';\n\n\n\n        auto username = getValue<input_Username>(ctx);\n        auto usernameLength = length(username);\n        char _username[usernameLength + 1];\n        dump(username, _username);\n        _username[usernameLength] = '\\0';\n\n        auto password = getValue<input_Password>(ctx);\n        auto passwordLength = length(password);\n        char _password[passwordLength + 1];\n        dump(password, _password);\n        _password[passwordLength] = '\\0';\n\n        auto id = getValue<input_ID>(ctx);\n        auto idLength = length(id);\n        char _id[idLength + 1];\n        dump(id, _id);\n        _id[idLength] = '\\0';\n\n    MQTT->begin(_server, state->client);\n    MQTT->onMessage(messageReceived);\n    while (!MQTT->connect(_id, _username, _password)) {\n      delay(1000);\n        }\n    }\n    auto state = getState(ctx);\n    auto MQTT = reinterpret_cast<MQTTClient*>(state->mem);\n    MQTT->loop();\n    delay(10);\n    emitValue<output_MQTT>(ctx, MQTT);\n}\n"
        }
      ],
      "description": "MQTT Device setup. Username and Password are optional.\n(Pengaturan perangkat. Username dan Password opsional).",
      "nodes": {
        "BkZBBaEsQN": {
          "boundLiterals": {
            "__out__": "\"try\""
          },
          "description": "Leave Blank for NONE",
          "label": "Username",
          "id": "BkZBBaEsQN",
          "position": {
            "x": 6,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "Bygji-oQN": {
          "label": "INET",
          "id": "Bygji-oQN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "type": "xod-dev/esp8266-mcu/input-esp8266-mcu-inet"
        },
        "ByxHBa4oXE": {
          "boundLiterals": {
            "__out__": "\"Arduino\""
          },
          "description": "The ID of This device to show in MQTT",
          "label": "ID",
          "id": "ByxHBa4oXE",
          "position": {
            "x": 4,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "HyMrBpViQN": {
          "boundLiterals": {
            "__out__": "\"try\""
          },
          "description": "Leave Blank for NONE",
          "label": "Password",
          "id": "HyMrBpViQN",
          "position": {
            "x": 7,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "r1rBTEoQN": {
          "boundLiterals": {
            "__out__": "\"192.168.1.1\""
          },
          "description": "MQTT Server",
          "label": "Server",
          "id": "r1rBTEoQN",
          "position": {
            "x": 2,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-string"
        },
        "r1uO3hiJE": {
          "id": "r1uO3hiJE",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/not-implemented-in-xod"
        },
        "rJg_d3hoy4": {
          "label": "MQTT",
          "id": "rJg_d3hoy4",
          "position": {
            "x": 0,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-self"
        }
      },
      "path": "@/nusabot-device"
    }
  },
  "name": "nusabot-mqtt",
  "apiKey": "e705305d-7bee-4f9c-a6e8-9a101caf71da"
}